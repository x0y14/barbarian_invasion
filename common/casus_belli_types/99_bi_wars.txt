# 移住
# 人用
barbarian_migration = {
	icon = invasion
	group = invasion

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	target_titles = all
	target_title_tier = duchy
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder

	ai_can_target_all_titles = { always = yes }
	# ai_score_mult = { value = varangian_adventure_ai_targeting_value }

	# war score
	# 移住なので、マジャールと同じく自分の領土が占領された際のスコアを少なく
	max_attacker_score_from_battles = 200
	max_defender_score_from_battles = 200
	max_defender_score_from_occupation = 50
	max_attacker_score_from_occupation = 150
	full_occupation_by_defender_gives_victory = no
	landless_attacker_needs_armies = no
	attacker_capital_gives_war_score = no
	


	# CBが表示される条件
	allowed_for_character = {
		# テュルク系遊牧民
		has_government = tribal_government
		OR = {
			culture = { has_cultural_pillar = heritage_turkic }
			culture = { has_cultural_pillar = heritage_mongolic }
			culture = { has_cultural_pillar = heritage_magyar }
		}
		OR = {
			AND = {
				current_date >= 1066.1.1
				faith.religion = religion:islam_religion
			}
			faith = { has_doctrine_parameter = unreformed }
		}
		is_ai = no
		highest_held_title_tier <= tier_duchy
	}

	# CBを使用する条件
	allowed_for_character_display_regardless = {
		is_at_war = no
		is_independent_ruler = yes
		highest_held_title_tier <= tier_duchy
	}

	# 攻撃対象
	allowed_against_character = {
		# Defender must be bordering your realm.
		OR = {
			character_is_land_realm_neighbor = scope:attacker
			AND = {
				exists = scope:attacker.liege
				character_is_land_realm_neighbor = scope:attacker.liege
			}
		}

		# 部族整体ではない
		NOT = { has_government = tribal_government }
	}

	valid_to_start = {
	}

	# こんなときCBが無効になるよ
	should_invalidate = {
		OR = {
			# 守る側が攻撃対象を持たなくなってしまったとき?
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							target_is_same_character_or_above = scope:defender
						}
					}
				}
			}
			scope:attacker = {
				OR = {
					# 独立してないとき
					is_independent_ruler = no
					# 王国以上を持っているとき
					highest_held_title_tier >= tier_kingdom
				}
			}
			
		}
	}

	# 無効化されたと
	on_invalidated_desc = msg_county_conquest_war_invalidated_message
	
	on_invalidated = {}

	# コスト
	cost = {
		piety = {
			add = barbarian_migration_base_piety_cost

			multiply = common_cb_piety_cost_multiplier
		}
		prestige = {
			value = barbarian_migration_cb_cost
			multiply = common_cb_prestige_cost_multiplier
		}
	}

	# 宣戦布告時
	on_declaration = {
		on_declared_war = yes

		# イベント兵のスポーン
		scope:attacker = {
			if = {
				limit = {
					exists = capital_province
				}
				spawn_army = {
					men_at_arms = {
						type = horse_archers
						stacks = 5
					}
					men_at_arms = {
						type = light_horsemen
						stacks = 5
					}
					location = capital_province
					uses_supply = yes
					inheritable = yes
					name = turkic_tribal_event_troops
				}
			}
		}
	}

	# 勝利時
	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = { is_local_player = yes }
				}
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
	}

	on_victory = {
		scope:attacker = {
			## 領土変更
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}

			# 領土の接収->
			every_in_list = {
				list = target_titles
				custom_tooltip = CONQUEST_CB_TITLE
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_county
						# Current holder must be a (sub)vassal of the defender (no poaching titles from 3rd parties!)
						#exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
						take_baronies = yes
					}
				}
				scope:attacker = {
					if = {
						limit = { is_independent_ruler = no }
						becomes_independent = {
							change = scope:change
						}
					}
				}
			}
			resolve_title_and_vassal_change = scope:change
			# <-領土の接収


			# 誰かの封臣になってしまったら独立させる
			hidden_effect = {
				#If the Mogyers aren't independent, make them so.
				if = {
					limit = {
						scope:attacker = { is_independent_ruler = no }
					}
					create_title_and_vassal_change = {
						type = independency
						save_scope_as = change_ind
						add_claim_on_loss = no
					}
					change_liege_or_become_independent = {
						CHANGE = scope:change_ind
						VASSAL = scope:attacker
					}
					resolve_title_and_vassal_change = scope:change_ind
				}
			}
			

			## 適切な公爵タイトルの保存
			## Grab the appropriate duchy for future independence checks.
			random_in_list = {
				list = target_titles
				limit = { tier = tier_duchy }
				save_scope_as = target_duchy
			}

			# 公爵タイトル->
			## タイトルが作成されてなかったら作成する
			## Next, if the appropriate duchy doesn't already exist, create it.
			if = {
				limit = {
					any_in_list = {
						list = target_titles
						tier = tier_duchy
						is_title_created = no
					}
				}
				random_in_list = {
					list = target_titles
					limit = { tier = tier_duchy }
					save_scope_as = new_duchy
				}
				create_title_and_vassal_change = {
					type = created
					save_scope_as = change
					add_claim_on_loss = no
				}
				scope:new_duchy = {
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## 奪う
			## Else if it does & is a part of scope:defender's sub-realm, usurp it.
			else_if = {
				limit = {
					any_in_list = {
						list = target_titles
						tier = tier_duchy
						holder = {
							OR = {
								this = scope:defender
								any_liege_or_above = { this = scope:defender }
							}
						}
					}
				}
				random_in_list = {
					list = target_titles
					# No need to check all triggers, since there'll only ever be one duchy in the list.
					limit = { tier = tier_duchy }
					save_scope_as = new_duchy
				}
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = yes
				}
				scope:new_duchy = {
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## 一時的なタイトルを作成する
			## Else we want a titular duchy.
			else = {
				# ツールチップに表示するためのエフェクト
				# To keep tooltips neat, show the core duchy as transferring (preventing a messy "unlanded of" from appearing).
				show_as_tooltip = {
					random_in_list = {
					list = target_titles
						limit = { tier = tier_duchy }
						save_scope_as = new_duchy
					}
					create_title_and_vassal_change = {
						type = created
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:new_duchy = {
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
				# 実際に一時的なのを作る
				# Actual transfer.
				hidden_effect = {
					# Randomising the names a little.
					create_dynamic_title = {
						tier = duchy
						name = BARBARIAN_MIGRATION_HOUSE_NAME
					}
					create_title_and_vassal_change = {
						type = created
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:new_title = {
						set_destroy_on_gain_same_tier = yes
						set_no_automatic_claims = yes
						set_can_be_named_after_dynasty = no
						set_color_from_title = scope:target_duchy
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
						save_scope_as = new_duchy
					}
					resolve_title_and_vassal_change = scope:change
					scope:new_title = { set_coa = scope:attacker.house }
				}
			}
			# <-公爵タイトル

			# 首都設定->
			## Set a new capital.
			### We prefer the de jure capital of the other.
			if = {
				limit = {
					exists = scope:new_duchy.title_capital_county
					any_held_title = {
						tier = tier_county
						this = scope:new_duchy.title_capital_county
					}
				}
				random_held_county = {
					limit = { this = scope:new_duchy.title_capital_county }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			else_if = {
				limit = {
					any_in_list = {
						list = target_titles
						this = duchy.title_capital_county
					}
				}
				random_in_list = {
					list = target_titles
					limit = { this = duchy.title_capital_county }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			### Everyone else prefers the highest development.
			else = {
				ordered_in_list = {
					list = target_titles
					limit = { tier = tier_county }
					order_by = { add = development_level }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			# <-首都設定

			# 部族でなくなってしまった場合、部族に戻す
			if = {
				limit = {
					NOT = { has_government = tribal_government }
				}
				change_government = tribal_government
			}

			# 手放した土地->
			# Then re-order stuff in the Old Country.
			## 持ってた公爵タイトルを破壊
			## First, we destroy any other ducal titles scope:attacker holds (excepting HoF titles).
			if = {
				limit = {
					any_held_title = {
						tier = tier_duchy
						NOR = {
							this = scope:new_duchy
							is_head_of_faith = yes
						}
					}
				}
				every_held_title = {
					limit = {
						tier = tier_duchy
						NOR = {
							this = scope:new_duchy
							is_head_of_faith = yes
						}
					}
					save_temporary_scope_as = excess_duchy
					scope:attacker = { destroy_title = scope:excess_duchy }
				}
			}
			## 封臣だった家族をリストアップ
			## Sort out vassalised family.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.family_transfer
			every_vassal_or_below = {
				limit = { dynasty = scope:attacker.dynasty }
				add_to_list = vassalised_family_list
			}
			# 代わりに渡す土地をリストアップ
			every_held_title = {
				limit = {
					duchy = { is_in_list = target_titles }
					tier = tier_county
				}
				add_to_list = spare_counties_list
			}
			## 家族に土地を渡す
			## If there are any to account for, we bring over other landed family members from the Old Country & try to give them counties in the colony.
			if = {
				limit = {
					any_in_list = {
						list = vassalised_family_list
						count >= 1
					}
				}
				# Then iterate through the family members, dishing out titles as appropriate.
				every_in_list = {
					list = vassalised_family_list
					# Players first.
					limit = { is_ai = no }
					# Then NPCs, prioritising counts.
					alternative_limit = { highest_held_title_tier = tier_county }
					# We don't process barons, they can just go landless.
					# Grab the currently affected vassal.
					save_temporary_scope_as = receiving_vassal
					# Then, if there's anything in that list, look at handing out titles.
					if = {
						limit = {
							any_in_list = {
								list = spare_counties_list
								NOT = { this = scope:attacker.capital_county }
								holder = scope:attacker
							}
						}
						random_in_list = {
							list = spare_counties_list
							limit = {
								NOT = { this = scope:attacker.capital_county }
								tier = tier_county
								holder = scope:attacker
							}
							save_temporary_scope_as = spare_county
							create_title_and_vassal_change = {
								type = granted
								save_scope_as = change
								add_claim_on_loss = no
							}
							scope:spare_county = {
								change_title_holder = {
									holder = scope:receiving_vassal
									change = scope:change
								}
							}
							resolve_title_and_vassal_change = scope:change
						}
						# And add them to the post-processing list so we can divy out their lands elsewhere.
						add_to_list = vassal_family_processed_list
					}
					# Otherwise, we're going to have to do something special with this character, so take note of them for later.
					else = { add_to_list = vassal_family_not_processed_list }
				}
			}
			## 自分の持ってた放棄した土地をローカルな宗教、文化の人に渡す
			## Distribute scope:attacker's old domains to peasant vassals of the local culture/faith.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.old_domains
			every_held_title = {
				limit = {
					tier = tier_county
					duchy = {
						NOT = { this = scope:target_duchy }
					}
				}
				# Grab the county for ease of reference.
				save_temporary_scope_as = current_county
				# Create an elevated peasant to claim the county.
				create_character = {
					location = scope:current_county.title_province
					template = old_country_local_warlord_template
					save_temporary_scope_as = local_warlord
				}
				# Assign the seceding title to the new upstart.
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					scope:current_county = {
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
				# And give them their independence.
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					scope:local_warlord = {
						becomes_independent = { change = scope:change }
						save_scope_as = truce_loc
						add_truce_both_ways = {
							character = scope:attacker
							days = 3650
							name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
				# 同じ宗教、文化だったら部族に
				hidden_effect = {
					if = {
						limit = {
							scope:local_warlord.faith = scope:attacker.faith
							scope:local_warlord.culture = scope:attacker.culture
						}
						scope:local_warlord = {
							change_government = tribal_government
						}
					}
				}
			}
			## 家族の持ってた放棄した土地をローカルな宗教、文化の人に渡す
			## Distribute landed family's domains outside of the colony to peasant vassals of the local culture/faith.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.landed_family_old_domains
			every_in_list = {
				list = vassal_family_processed_list
				every_held_title = {
					limit = {
						tier = tier_county
						duchy = {
							NOT = { this = scope:target_duchy }
						}
					}
					# Grab the county for ease of reference.
					save_temporary_scope_as = current_county
					# Create an elevated peasant to claim the county.
					create_character = {
						location = scope:current_county.title_province
						template = old_country_local_warlord_template
						save_temporary_scope_as = local_warlord
					}
					# Assign the seceding title to the new upstart.
					create_title_and_vassal_change = {
						type = usurped
						save_scope_as = change
						add_claim_on_loss = no
					}
					hidden_effect = {
						scope:current_county = {
							change_title_holder = {
								holder = scope:local_warlord
								change = scope:change
								take_baronies = yes
							}
						}
					}
					resolve_title_and_vassal_change = scope:change
					# And give them their independence.
					create_title_and_vassal_change = {
						type = independency
						save_scope_as = change
						add_claim_on_loss = no
					}
					hidden_effect = {
						scope:local_warlord = {
							becomes_independent = { change = scope:change }
							save_scope_as = truce_loc
							add_truce_both_ways = {
								character = scope:attacker
								days = 3650
								name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
							}
						}
					}
					resolve_title_and_vassal_change = scope:change
					# 同じ宗教、文化だったら部族に
					hidden_effect = {
						if = {
							limit = {
								scope:local_warlord.faith = scope:attacker.faith
								scope:local_warlord.culture = scope:attacker.culture
							}
							scope:local_warlord = {
								change_government = tribal_government
							}
						}
					}
				}
			}
			## 土地を受け取ったひとを独立させる
			## Give all old vassals outside of the target_titles independence.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.old_vassals
			every_vassal = {
				limit = {
					NOT = {
						any_held_title = { duchy = scope:target_duchy }
					}
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					becomes_independent = { change = scope:change }
					save_scope_as = truce_loc
					add_truce_both_ways = {
						character = scope:attacker
						days = 3650
						name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			# <-手放した土地

			# 家族の移動->
			## Move any remaining newly-landless family to scope:attacker's court.
			every_in_list = {
				list = vassal_family_not_processed_list
				limit = { is_ruler = no }
				save_temporary_scope_as = landless_family
				scope:attacker = { add_courtier = scope:landless_family }
			}
			# <-家族の移動

			# 冒険者->
			## If scope:attacker wasn't an adventurer before, make them one.
			if = {
				limit = {
					NOT = { has_trait = adventurer }
				}
				add_trait = adventurer
			}
			# <-冒険者

			# 移動回数の記録->
			## Increment their Varangian Adventurer CB tally.
			if = {
				limit = {
					NOT = { has_variable = bm_cb_tally }
				}
				set_variable = {
					name = bm_cb_tally
					value = 1
				}
			}
			else = {
				change_variable = {
					name = bm_cb_tally
					add = 1
				}
			}
			# <-移動回数の記録
		}

		#If the Mogyers aren't independent, make them so.
		if = {
			limit = {
				scope:attacker = { is_independent_ruler = no }
			}
			create_title_and_vassal_change = {
				type = independency
				save_scope_as = change
				add_claim_on_loss = no
			}
			change_liege_or_become_independent = {
				CHANGE = scope:change
				VASSAL = scope:attacker
			}
			resolve_title_and_vassal_change = scope:change
		}

		# 名声取得
		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# 同盟者と名声を分け合う?
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# 外交範囲外になった同盟者との同名を切る
		# Break alliances now out of diplo range
		if = {
			limit = {
				scope:attacker = {
					any_ally = {
						NOT = { in_diplomatic_range = scope:attacker }
					}
				}
			}
			scope:attacker = {
				every_ally = {
					limit = {
						NOT = { in_diplomatic_range = scope:attacker }
					}
					break_alliance = scope:attacker
				}
			}
		}

		# 停戦
		# Truce
		add_truce_attacker_victory_effect = yes
	}

	# 白紙和平時
	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}

	on_white_peace = {
		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # Not important as the scales are identical
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}

		add_truce_white_peace_effect = yes
	}

	# 攻撃者が負けたとき
	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}

	on_defeat = {
		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}

		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "BARBARIAN_MIGRATION_CB_INVASION_WAR_NAME"
	war_name_base = "BARBARIAN_MIGRATION_CB_INVASION_WAR_NAME_BASE"
	cb_name = "BARBARIAN_MIGRATION_CB_NAME"

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8
}

# 移住
# ai用
barbarian_migration_ai = {
	icon = invasion
	group = invasion

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	target_titles = all
	target_title_tier = duchy
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder

	ai_can_target_all_titles = { always = yes }
	# ai_score_mult = { value = varangian_adventure_ai_targeting_value }

	# war score
	# 移住なので、マジャールと同じく自分の領土が占領された際のスコアを少なく
	max_attacker_score_from_battles = 200
	max_defender_score_from_battles = 200
	max_defender_score_from_occupation = 50
	max_attacker_score_from_occupation = 150
	full_occupation_by_defender_gives_victory = no
	landless_attacker_needs_armies = no
	attacker_capital_gives_war_score = no
	
	
	# CBが表示される条件
	allowed_for_character = {
		# テュルク系遊牧民
		has_government = tribal_government
		OR = {
			culture = { has_cultural_pillar = heritage_turkic }
			culture = { has_cultural_pillar = heritage_mongolic }
		}
		OR = {
			AND = {
				current_date >= 1066.1.1
				faith.religion = religion:islam_religion
			}
			faith = { has_doctrine_parameter = unreformed }
		}
		is_ai = yes

		NOT = { has_character_flag = bm_cb_cooldown }
	}

	# CBを使用する条件
	allowed_for_character_display_regardless = {
		is_at_war = no
		is_independent_ruler = yes
		highest_held_title_tier <= tier_duchy
	}

	# 攻撃可能対象
	allowed_against_character = {
		# Defender must be bordering your realm.
		OR = {
			character_is_land_realm_neighbor = scope:attacker
			AND = {
				exists = scope:attacker.liege
				character_is_land_realm_neighbor = scope:attacker.liege
			}
		}

		OR = {
			# テングリであれば、異教徒全般
			AND = {
				scope:attacker.faith = faith:tengri_pagan
				scope:attacker.faith.religion = religion:islam_religion
				NOT = { faith = scope:attacker.faith }
			}

			# これ基本
			# 部族以外の政体
			NOT = { has_government = tribal_government }

			# 熟練
			# 冒険者であるならば、仲間をも攻撃し、求める土地へ向かう
			scope:attacker = { has_variable = bm_cb_tally }
		}

		NOT = { has_character_flag = bm_cb_protect }
	}

	allowed_against_character_display_regardless = {
		is_independent_ruler = yes
		# highest_held_title_tier >= tier_duchy
		# 攻撃者より総合開発どが低い人には使用できない
		held_higher_total_dev_lv_trigger = { CHAR = scope:attacker }
	}

	valid_to_start = {
		scope:attacker = {
			total_dev_lv < {
				value = 0
				add = {
					scope:target = {
						every_in_de_jure_hierarchy = {
							limit = {
								tier = tier_county
								OR = {
									holder = scope:defender
									holder = { is_vassal_or_below_of = scope:defender }
								}
							}
							add = this.development_level
						}
					}
				}
			}
		}
	}

	# こんなときCBが無効になるよ
	should_invalidate = {
		OR = {
			# 守る側が攻撃対象を持たなくなってしまったとき?
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						exists = holder
						holder = {
							target_is_same_character_or_above = scope:defender
						}
					}
				}
			}
			scope:attacker = {
				OR = {
					# 独立してないとき
					is_independent_ruler = no
					# 王国以上を持っているとき
					highest_held_title_tier >= tier_kingdom
				}
			}
		}
	}

	# 無効化されたと
	on_invalidated_desc = msg_county_conquest_war_invalidated_message
	
	on_invalidated = {}

	# コスト
	cost = {
		prestige = {
			value = 0
			# multiply = common_cb_prestige_cost_multiplier
		}
	}

	# 宣戦布告時
	on_declaration = {
		on_declared_war = yes

		# イベント兵のスポーン
		scope:attacker = {
			if = {
				limit = {
					exists = capital_province
				}
				spawn_army = {
					men_at_arms = {
						type = horse_archers
						stacks = BARBARIAN_MIGRATION_CB_FOR_AI_ON_NUM_OF_horse_archers_ON_DECLARATION
					}
					men_at_arms = {
						type = light_horsemen
						stacks = BARBARIAN_MIGRATION_CB_FOR_AI_NUM_OF_light_horsemen_ON_DECLARATION
					}
					men_at_arms = {
						type = onager
						stacks = BARBARIAN_MIGRATION_CB_FOR_AI_NUM_OF_onager_ON_DECLARATION
					}
					location = capital_province
					uses_supply = no
					inheritable = yes
					name = turkic_tribal_event_troops
				}
			}
		}

		hidden_effect = {
			if = {
				limit = { NOT = { has_game_rule = barbarian_migration_frequency_apocalyptic } }
				scope:attacker = {
					add_character_flag = {
						flag = bm_cb_cooldown
						years = BARBARIAN_MIGRATION_CB_FOR_AI_COOLDOWN
					}
				}
				scope:defender = {
					add_character_flag = {
						flag = bm_cb_protect
						years = BARBARIAN_MIGRATION_CB_FOR_AI_PROTECT
					}
				}
			}
		}
	}

	# 勝利時
	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = { is_local_player = yes }
				}
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
	}

	on_victory = {
		scope:attacker = {
			## 領土変更
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}

			# 領土の接収->
			every_in_list = {
				list = target_titles
				custom_tooltip = CONQUEST_CB_TITLE
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_county
						# Current holder must be a (sub)vassal of the defender (no poaching titles from 3rd parties!)
						#exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
						take_baronies = yes
					}
				}
				scope:attacker = {
					if = {
						limit = { is_independent_ruler = no }
						becomes_independent = {
							change = scope:change
						}
					}
				}
			}
			resolve_title_and_vassal_change = scope:change
			# <-領土の接収

			# 誰かの封臣になってしまったら独立させる
			hidden_effect = {
				#If the Mogyers aren't independent, make them so.
				if = {
					limit = {
						scope:attacker = { is_independent_ruler = no }
					}
					create_title_and_vassal_change = {
						type = independency
						save_scope_as = change_ind
						add_claim_on_loss = no
					}
					change_liege_or_become_independent = {
						CHANGE = scope:change_ind
						VASSAL = scope:attacker
					}
					resolve_title_and_vassal_change = scope:change_ind
				}
			}

			## 適切な公爵タイトルの保存
			## Grab the appropriate duchy for future independence checks.
			random_in_list = {
				list = target_titles
				limit = { tier = tier_duchy }
				save_scope_as = target_duchy
			}

			# 公爵タイトル->
			## タイトルが作成されてなかったら作成する
			## Next, if the appropriate duchy doesn't already exist, create it.
			if = {
				limit = {
					any_in_list = {
						list = target_titles
						tier = tier_duchy
						is_title_created = no
					}
				}
				random_in_list = {
					list = target_titles
					limit = { tier = tier_duchy }
					save_scope_as = new_duchy
				}
				create_title_and_vassal_change = {
					type = created
					save_scope_as = change
					add_claim_on_loss = no
				}
				scope:new_duchy = {
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## 奪う
			## Else if it does & is a part of scope:defender's sub-realm, usurp it.
			else_if = {
				limit = {
					any_in_list = {
						list = target_titles
						tier = tier_duchy
						holder = {
							OR = {
								this = scope:defender
								any_liege_or_above = { this = scope:defender }
							}
						}
					}
				}
				random_in_list = {
					list = target_titles
					# No need to check all triggers, since there'll only ever be one duchy in the list.
					limit = { tier = tier_duchy }
					save_scope_as = new_duchy
				}
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = yes
				}
				scope:new_duchy = {
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## 一時的なタイトルを作成する
			## Else we want a titular duchy.
			else = {
				# ツールチップに表示するためのエフェクト
				# To keep tooltips neat, show the core duchy as transferring (preventing a messy "unlanded of" from appearing).
				show_as_tooltip = {
					random_in_list = {
					list = target_titles
						limit = { tier = tier_duchy }
						save_scope_as = new_duchy
					}
					create_title_and_vassal_change = {
						type = created
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:new_duchy = {
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
				# 実際に一時的なのを作る
				# Actual transfer.
				hidden_effect = {
					# Randomising the names a little.
					create_dynamic_title = {
						tier = duchy
						name = BARBARIAN_MIGRATION_HOUSE_NAME
					}
					create_title_and_vassal_change = {
						type = created
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:new_title = {
						set_destroy_on_gain_same_tier = yes
						set_no_automatic_claims = yes
						set_can_be_named_after_dynasty = no
						set_color_from_title = scope:target_duchy
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
						save_scope_as = new_duchy
					}
					resolve_title_and_vassal_change = scope:change
					scope:new_title = { set_coa = scope:attacker.house }
				}
			}
			# <-公爵タイトル

			# 首都設定->
			## Set a new capital.
			### We prefer the de jure capital of the other.
			if = {
				limit = {
					exists = scope:new_duchy.title_capital_county
					any_held_title = {
						tier = tier_county
						this = scope:new_duchy.title_capital_county
					}
				}
				random_held_county = {
					limit = { this = scope:new_duchy.title_capital_county }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			else_if = {
				limit = {
					any_in_list = {
						list = target_titles
						this = duchy.title_capital_county
					}
				}
				random_in_list = {
					list = target_titles
					limit = { this = duchy.title_capital_county }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			### Everyone else prefers the highest development.
			else = {
				ordered_in_list = {
					list = target_titles
					limit = { tier = tier_county }
					order_by = { add = development_level }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			# <-首都設定

			# 部族でなくなってしまった場合、部族に戻す
			if = {
				limit = {
					NOT = { has_government = tribal_government }
				}
				change_government = tribal_government
			}

			# 手放した土地->
			# Then re-order stuff in the Old Country.
			## 持ってた公爵タイトルを破壊
			## First, we destroy any other ducal titles scope:attacker holds (excepting HoF titles).
			if = {
				limit = {
					any_held_title = {
						tier = tier_duchy
						NOR = {
							this = scope:new_duchy
							is_head_of_faith = yes
						}
					}
				}
				every_held_title = {
					limit = {
						tier = tier_duchy
						NOR = {
							this = scope:new_duchy
							is_head_of_faith = yes
						}
					}
					save_temporary_scope_as = excess_duchy
					scope:attacker = { destroy_title = scope:excess_duchy }
				}
			}
			## 封臣だった家族をリストアップ
			## Sort out vassalised family.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.family_transfer
			every_vassal_or_below = {
				limit = { dynasty = scope:attacker.dynasty }
				add_to_list = vassalised_family_list
			}
			# 代わりに渡す土地をリストアップ
			every_held_title = {
				limit = {
					duchy = { is_in_list = target_titles }
					tier = tier_county
				}
				add_to_list = spare_counties_list
			}
			## 家族に土地を渡す
			## If there are any to account for, we bring over other landed family members from the Old Country & try to give them counties in the colony.
			if = {
				limit = {
					any_in_list = {
						list = vassalised_family_list
						count >= 1
					}
				}
				# Then iterate through the family members, dishing out titles as appropriate.
				every_in_list = {
					list = vassalised_family_list
					# Players first.
					limit = { is_ai = no }
					# Then NPCs, prioritising counts.
					alternative_limit = { highest_held_title_tier = tier_county }
					# We don't process barons, they can just go landless.
					# Grab the currently affected vassal.
					save_temporary_scope_as = receiving_vassal
					# Then, if there's anything in that list, look at handing out titles.
					if = {
						limit = {
							any_in_list = {
								list = spare_counties_list
								NOT = { this = scope:attacker.capital_county }
								holder = scope:attacker
							}
						}
						random_in_list = {
							list = spare_counties_list
							limit = {
								NOT = { this = scope:attacker.capital_county }
								tier = tier_county
								holder = scope:attacker
							}
							save_temporary_scope_as = spare_county
							create_title_and_vassal_change = {
								type = granted
								save_scope_as = change
								add_claim_on_loss = no
							}
							scope:spare_county = {
								change_title_holder = {
									holder = scope:receiving_vassal
									change = scope:change
								}
							}
							resolve_title_and_vassal_change = scope:change
						}
						# And add them to the post-processing list so we can divy out their lands elsewhere.
						add_to_list = vassal_family_processed_list
					}
					# Otherwise, we're going to have to do something special with this character, so take note of them for later.
					else = { add_to_list = vassal_family_not_processed_list }
				}
			}
			## 自分の持ってた放棄した土地をローカルな宗教、文化の人に渡す
			## Distribute scope:attacker's old domains to peasant vassals of the local culture/faith.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.old_domains
			every_held_title = {
				limit = {
					tier = tier_county
					duchy = {
						NOT = { this = scope:target_duchy }
					}
				}
				# Grab the county for ease of reference.
				save_temporary_scope_as = current_county
				# Create an elevated peasant to claim the county.
				create_character = {
					location = scope:current_county.title_province
					template = old_country_local_warlord_template
					save_temporary_scope_as = local_warlord
				}
				# Assign the seceding title to the new upstart.
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					scope:current_county = {
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
				# And give them their independence.
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					scope:local_warlord = {
						becomes_independent = { change = scope:change }
						save_scope_as = truce_loc
						add_truce_both_ways = {
							character = scope:attacker
							days = 3650
							name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
				# 同じ宗教、文化だったら部族に
				hidden_effect = {
					if = {
						limit = {
							scope:local_warlord.faith = scope:attacker.faith
							scope:local_warlord.culture = scope:attacker.culture
						}
						scope:local_warlord = {
							change_government = tribal_government
						}
					}
				}
			}
			## 家族の持ってた放棄した土地をローカルな宗教、文化の人に渡す
			## Distribute landed family's domains outside of the colony to peasant vassals of the local culture/faith.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.landed_family_old_domains
			every_in_list = {
				list = vassal_family_processed_list
				every_held_title = {
					limit = {
						tier = tier_county
						duchy = {
							NOT = { this = scope:target_duchy }
						}
					}
					# Grab the county for ease of reference.
					save_temporary_scope_as = current_county
					# Create an elevated peasant to claim the county.
					create_character = {
						location = scope:current_county.title_province
						template = old_country_local_warlord_template
						save_temporary_scope_as = local_warlord
					}
					# Assign the seceding title to the new upstart.
					create_title_and_vassal_change = {
						type = usurped
						save_scope_as = change
						add_claim_on_loss = no
					}
					hidden_effect = {
						scope:current_county = {
							change_title_holder = {
								holder = scope:local_warlord
								change = scope:change
								take_baronies = yes
							}
						}
					}
					resolve_title_and_vassal_change = scope:change
					# And give them their independence.
					create_title_and_vassal_change = {
						type = independency
						save_scope_as = change
						add_claim_on_loss = no
					}
					hidden_effect = {
						scope:local_warlord = {
							becomes_independent = { change = scope:change }
							save_scope_as = truce_loc
							add_truce_both_ways = {
								character = scope:attacker
								days = 3650
								name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
							}
						}
					}
					resolve_title_and_vassal_change = scope:change
					# 同じ宗教、文化だったら部族に
					hidden_effect = {
						if = {
							limit = {
								scope:local_warlord.faith = scope:attacker.faith
								scope:local_warlord.culture = scope:attacker.culture
							}
							scope:local_warlord = {
								change_government = tribal_government
							}
						}
					}
				}
			}
			## 土地を受け取ったひとを独立させる
			## Give all old vassals outside of the target_titles independence.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.old_vassals
			every_vassal = {
				limit = {
					NOT = {
						any_held_title = { duchy = scope:target_duchy }
					}
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					becomes_independent = { change = scope:change }
					save_scope_as = truce_loc
					add_truce_both_ways = {
						character = scope:attacker
						days = 3650
						name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
					}
				}
				resolve_title_and_vassal_change = scope:change

				# 拡散
				hidden_effect = {
					if = {
						limit = {
							has_game_rule = barbarian_migration_strength_hard
							faith = scope:attacker.faith
							OR = {
								faith = faith:tengri_pagan
								faith.religion = religion:islam_religion
							}
							NOT = { has_government = tribal_government }
						}
						change_government = tribal_government
					}
				}
			}
			# <-手放した土地

			# 家族の移動->
			## Move any remaining newly-landless family to scope:attacker's court.
			every_in_list = {
				list = vassal_family_not_processed_list
				limit = { is_ruler = no }
				save_temporary_scope_as = landless_family
				scope:attacker = { add_courtier = scope:landless_family }
			}
			# <-家族の移動

			# 冒険者->
			## If scope:attacker wasn't an adventurer before, make them one.
			if = {
				limit = {
					NOT = { has_trait = adventurer }
				}
				add_trait = adventurer
			}
			# <-冒険者

			# 移動回数の記録->
			## Increment their Varangian Adventurer CB tally.
			if = {
				limit = {
					NOT = { has_variable = bm_cb_tally }
				}
				set_variable = {
					name = bm_cb_tally
					value = 1
				}
			}
			else = {
				change_variable = {
					name = bm_cb_tally
					add = 1
				}
			}
			# <-移動回数の記録
		}

		# 奪った土地全ての男爵領の開発度を下げてその分お金と名声を得る
		# 移動し続けてほしい
		# tooltipにしても良いかも
		custom_tooltip = {
			text = MIGRATION_CB_RAZE_COUNTY
			scope:attacker = {
				if = {
					limit = {
						has_game_rule = barbarian_migration_strength_normal
					}
					every_realm_county = {
						random_list = {
							25 = {
								change_development_progress_with_overflow = -200
								scope:attacker = {
									add_gold = 50
									add_prestige_experience = 50
								}
							}
							55 = {
								change_development_progress_with_overflow = -300
								scope:attacker = {
									add_gold = 60
									add_prestige_experience = 60
								}
			
							}
							15 = {
								change_development_progress_with_overflow = -400
								scope:attacker = {
									add_gold = 70
									add_prestige_experience = 70
								}
							}
							5 = {
								change_development_progress_with_overflow = -500
								scope:attacker = {
									add_gold = 80
									add_prestige_experience = 80
								}
							}
						}
					}
				}
				else_if = {
					limit = {
						has_game_rule = barbarian_migration_strength_hard
					}
					every_realm_county = {
						random_list = {
							15 = {
								change_development_progress_with_overflow = -200
								scope:attacker = {
									add_gold = 50
									add_prestige_experience = 50
								}
							}
							5 = {
								change_development_progress_with_overflow = -300
								scope:attacker = {
									add_gold = 60
									add_prestige_experience = 60
								}
			
							}
							5 = {
								change_development_progress_with_overflow = -400
								scope:attacker = {
									add_gold = 70
									add_prestige_experience = 70
								}
							}
							75 = {
								change_development_progress_with_overflow = -500
								scope:attacker = {
									add_gold = 80
									add_prestige_experience = 80
								}
							}
						}
					}
				}
				every_sub_realm_barony = {
					title_province = {
						if = {
							limit = { NOT = { has_province_modifier = recently_looted_modifier } }
							add_province_modifier = {
								modifier = recently_looted_modifier
								years = 5
							}
						}
					}
				}
			}
		}

		if = {
			limit = {
				scope:attacker = { is_independent_ruler = no }
			}
			create_title_and_vassal_change = {
				type = independency
				save_scope_as = change
				add_claim_on_loss = no
			}
			change_liege_or_become_independent = {
				CHANGE = scope:change
				VASSAL = scope:attacker
			}
			resolve_title_and_vassal_change = scope:change
		}

		# 名声取得
		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# 同盟者と名声を分け合う?
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# 外交範囲外になった同盟者との同名を切る
		# Break alliances now out of diplo range
		if = {
			limit = {
				scope:attacker = {
					any_ally = {
						NOT = { in_diplomatic_range = scope:attacker }
					}
				}
			}
			scope:attacker = {
				every_ally = {
					limit = {
						NOT = { in_diplomatic_range = scope:attacker }
					}
					break_alliance = scope:attacker
				}
			}
		}

		# 停戦
		# Truce
		add_truce_attacker_victory_effect = yes
	}

	# 白紙和平時
	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}

	on_white_peace = {
		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # Not important as the scales are identical
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}

		add_truce_white_peace_effect = yes
	}

	# 攻撃者が負けたとき
	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}

	on_defeat = {
		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}

		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "BARBARIAN_MIGRATION_CB_INVASION_WAR_NAME"
	war_name_base = "BARBARIAN_MIGRATION_CB_INVASION_WAR_NAME_BASE"
	cb_name = "BARBARIAN_MIGRATION_AI_CB_NAME"

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8
}

direct_barbarian_settlement = {
	icon = invasion
	group = invasion	#Switching this to event will render the CB invisible.

	allowed_for_character = {
		OR = {
			AND = {
				# テュルク遊牧民
				# 部族政体
				has_government = tribal_government
				OR = {
					culture = { has_cultural_pillar = heritage_turkic }
					culture = { has_cultural_pillar = heritage_mongolic }
				}
				OR = {
					AND = {
						current_date >= 1066.1.1
						faith.religion = religion:islam_religion
					}
					faith = { has_doctrine_parameter = unreformed }
				}
				is_ai = yes

				AND = {
					has_variable = bm_cb_tally
					var:bm_cb_tally >= 4
				}
			}
			AND = {
				is_at_war = yes
				any_character_war = {
					OR = {
						using_cb = direct_barbarian_settlement
						using_cb = undirect_barbarian_settlement
					}
				}
			}
		}
	}

	# CBを使用する条件
	allowed_for_character_display_regardless = {
		is_at_war = no
		is_independent_ruler = yes
		highest_held_title_tier <= tier_duchy
	}

	# 攻撃対象
	allowed_against_character = {
		# Defender must be bordering your realm.
		OR = {
			character_is_land_realm_neighbor = scope:attacker
			AND = {
				exists = scope:attacker.liege
				character_is_land_realm_neighbor = scope:attacker.liege
			}
		}

		# 部族整体ではない
		NOT = { has_government = tribal_government }

		# 王国以上
		# highest_held_title_tier >= tier_duchy
	}
	
	# cbの設定
	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	target_titles = all
	target_title_tier = kingdom
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder

	# war score
	max_attacker_score_from_battles = 200
	max_defender_score_from_battles = 200
	max_defender_score_from_occupation = 25
	max_attacker_score_from_occupation = 150
	full_occupation_by_defender_gives_victory = yes
	check_all_defenders_for_ticking_war_score = yes
	attacker_capital_gives_war_score = no
	defender_capital_gives_war_score = no

	valid_to_start = {
		# exists = scope:defender
	}

	should_invalidate = {
	}

	on_invalidated = {
	}
	on_invalidated_desc = msg_invasion_war_invalidated_message

	cost = {
	}

	on_declaration = {
		random_in_list = {
			list = target_titles
			limit = { tier = tier_kingdom }
			save_scope_as = target
		}

		hidden_effect = {
			# 対象の王国に属する伯爵領を持つ、独立した君主(attackerと戦争中でない)に対して、強制的に戦争を開始
			# mongolの帝国侵攻や大聖戦と同じような感じ
			scope:target = {
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_county
						exists = holder
						holder = { is_independent_ruler = yes }
					}

					holder = { save_temporary_scope_as = title_holder }
					if = {
						limit = {
							scope:title_holder = { NOT = { is_at_war_with = scope:attacker } }
							NOT = { scope:title_holder = scope:attacker }
						}
						scope:attacker = {
							start_war = {
								cb = undirect_barbarian_settlement
								target = scope:title_holder
								target_title = scope:target
							}
						}
					}
				}
			}
		}

		# イベント兵のスポーン
		scope:attacker = {
			if = {
				limit = {
					exists = capital_province
				}
				spawn_army = {
					men_at_arms = {
						type = horse_archers
						stacks = DIRECT_BARBARIAN_SETTLEMENT_CB_FOR_AI_NUM_OF_horse_archers_DECLARATION
					}
					men_at_arms = {
						type = light_horsemen
						stacks = DIRECT_BARBARIAN_SETTLEMENT_CB_FOR_AI_NUM_OF_light_horsemen_DECLARATION
					}
					men_at_arms = {
						type = onager
						stacks = DIRECT_BARBARIAN_SETTLEMENT_CB_FOR_AI_NUM_OF_honager_DECLARATION
					}
					location = capital_province
					uses_supply = no
					inheritable = no
					name = turkic_tribal_event_troops
				}
			}
		}

		hidden_effect = {
			# 戦争中に死なないでほしい
			scope:attacker = {
				add_character_modifier = {
					modifier = fp1_bathing_health_modifier
					years = 30
				}
				add_character_modifier = {
					modifier = fp3_struggle_caliph_super_suspicious_modifier
					years = 30
				}
			}
		}

		on_declared_war = yes
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = { is_local_player = yes }
				}
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
	}
	on_victory = {
		# 王国の特定
		random_in_list = {
			list = target_titles
			limit = { tier = tier_kingdom }
			save_scope_as = target
		}

		scope:attacker = {
			hidden_effect = {
				add_gold = 300
			}

			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}

			# 領土の接収->
			every_in_list = {
				list = target_titles
				custom_tooltip = CONQUEST_CB_TITLE
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_county
						# Current holder must be a (sub)vassal of the defender (no poaching titles from 3rd parties!)
						#exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
						take_baronies = yes
					}
				}
				scope:attacker = {
					if = {
						limit = { is_independent_ruler = no }
						becomes_independent = {
							change = scope:change
						}
					}
				}
			}
			resolve_title_and_vassal_change = scope:change
			# <-領土の接収
	
			# 誰かの封臣になってしまったら独立させる
			hidden_effect = {
				#If the Mogyers aren't independent, make them so.
				if = {
					limit = {
						scope:attacker = { is_independent_ruler = no }
					}
					create_title_and_vassal_change = {
						type = independency
						save_scope_as = change_ind
						add_claim_on_loss = no
					}
					change_liege_or_become_independent = {
						CHANGE = scope:change_ind
						VASSAL = scope:attacker
					}
					resolve_title_and_vassal_change = scope:change_ind
				}
			}
	
			# 王国タイトルについて
			# 作られてなかったら作成
			if = {
				limit = {
					scope:target = { is_title_created = no }
				}
				create_title_and_vassal_change = {
					type = created
					save_scope_as = change
					add_claim_on_loss = no
				}
				scope:target = {
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			# 防衛側が持っていたら奪う
			else_if = {
				limit = {
					scope:target = {
						holder = {
							OR = {
								this = scope:defender
								any_liege_or_above = { this = scope:defender }
							}
						}
					}
				}
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = yes
				}
				scope:target = {
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			# 第三者が持っているので一時的なものを作成する
			else = {
				# ツールチップでエラーが出ないように作成すると表示する
				show_as_tooltip = {
					create_title_and_vassal_change = {
						type = created
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:target = {
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
				# 実際に一時的なものを作成する
				hidden_effect = {
					create_dynamic_title = {
						tier = kingdom
						name = BARBARIAN_CONFEDERATION_NAME
					}
					create_title_and_vassal_change = {
						type = created
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:new_title = {
						set_destroy_on_gain_same_tier = yes
						set_no_automatic_claims = yes
						set_can_be_named_after_dynasty = no
						set_color_from_title = scope:target
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
						save_scope_as = target
					}
					resolve_title_and_vassal_change = scope:change
					scope:new_title = { generate_coa = yes }
				}
			}
			
			# 首都設定->
			## Set a new capital.
			### We prefer the de jure capital of the other.
			if = {
				limit = {
					exists = scope:target.title_capital_county
					any_held_title = {
						tier = tier_county
						this = scope:target.title_capital_county
					}
				}
				random_held_county = {
					limit = { this = scope:target.title_capital_county }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			else_if = {
				limit = {
					any_in_list = {
						list = target_titles
						this = kingdom.title_capital_county
					}
				}
				random_in_list = {
					list = target_titles
					limit = { this = kingdom.title_capital_county }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			### Everyone else prefers the highest development.
			else = {
				ordered_in_list = {
					list = target_titles
					limit = { tier = tier_county }
					order_by = { add = development_level }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			# <-首都設定

			# 手放す土地について->
			## 持ってる公爵領タイトルを破壊
			if = {
				limit = {
					any_held_title = {
						tier = tier_duchy
						NOR = {
							is_head_of_faith = yes
							duchy = {
								any_in_de_jure_hierarchy = {
									this = scope:target
								}
							}
						}
					}
				}
				every_held_title = {
					limit = {
						tier = tier_duchy
						NOR = {
							is_head_of_faith = yes
							duchy = {
								any_in_de_jure_hierarchy = {
									this = scope:target
								}
							}
						}
					}
					save_temporary_scope_as = excess_duchy
					scope:attacker = { destroy_title = scope:excess_duchy }
				}
			}
			## 封臣だった家族をリストアップ
			## Sort out vassalised family.
			# custom_tooltip = fp1_varangian_adventurer_conquest.summaries.family_transfer
			# every_vassal_or_below = {
			# 	limit = { dynasty = scope:attacker.dynasty }
			# 	add_to_list = vassalised_family_list
			# }
			# 代わりに渡す土地をリストアップ
			# every_held_title = {
			# 	limit = {
			# 		kingdom = { is_in_list = target_titles }
			# 		tier = tier_county
			# 	}
			# 	add_to_list = spare_counties_list
			# }
			## 家族に土地を渡す
			## TODO:独立しないように安全に渡す

			# ## 自分の持ってた放棄した土地をローカルな宗教、文化の人に渡す
			# ## Distribute scope:attacker's old domains to peasant vassals of the local culture/faith.
			# custom_tooltip = fp1_varangian_adventurer_conquest.summaries.old_domains
			# every_held_title = {
			# 	limit = {
			# 		tier = tier_county
			# 		kingdom = {
			# 			NOT = { this = scope:target }
			# 		}
			# 	}
			# 	# Grab the county for ease of reference.
			# 	save_temporary_scope_as = current_county
			# 	# Create an elevated peasant to claim the county.
			# 	create_character = {
			# 		location = scope:current_county.title_province
			# 		template = old_country_local_warlord_template
			# 		save_temporary_scope_as = local_warlord
			# 	}
			# 	# Assign the seceding title to the new upstart.
			# 	create_title_and_vassal_change = {
			# 		type = usurped
			# 		save_scope_as = change
			# 		add_claim_on_loss = no
			# 	}
			# 	hidden_effect = {
			# 		scope:current_county = {
			# 			change_title_holder = {
			# 				holder = scope:local_warlord
			# 				change = scope:change
			# 				take_baronies = yes
			# 			}
			# 		}
			# 	}
			# 	resolve_title_and_vassal_change = scope:change
			# 	# And give them their independence.
			# 	create_title_and_vassal_change = {
			# 		type = independency
			# 		save_scope_as = change
			# 		add_claim_on_loss = no
			# 	}
			# 	hidden_effect = {
			# 		scope:local_warlord = {
			# 			becomes_independent = { change = scope:change }
			# 			save_scope_as = truce_loc
			# 			add_truce_both_ways = {
			# 				character = scope:attacker
			# 				days = 3650
			# 				name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
			# 			}
			# 		}
			# 	}
			# 	resolve_title_and_vassal_change = scope:change
			# }
			# ## 家族の持ってた放棄した土地をローカルな宗教、文化の人に渡す
			# ## Distribute landed family's domains outside of the colony to peasant vassals of the local culture/faith.
			# custom_tooltip = fp1_varangian_adventurer_conquest.summaries.landed_family_old_domains
			# every_in_list = {
			# 	list = vassal_family_processed_list
			# 	every_held_title = {
			# 		limit = {
			# 			tier = tier_county
			# 			kingdom = {
			# 				NOT = { this = scope:target }
			# 			}
			# 		}
			# 		# Grab the county for ease of reference.
			# 		save_temporary_scope_as = current_county
			# 		# Create an elevated peasant to claim the county.
			# 		create_character = {
			# 			location = scope:current_county.title_province
			# 			template = old_country_local_warlord_template
			# 			save_temporary_scope_as = local_warlord
			# 		}
			# 		# Assign the seceding title to the new upstart.
			# 		create_title_and_vassal_change = {
			# 			type = usurped
			# 			save_scope_as = change
			# 			add_claim_on_loss = no
			# 		}
			# 		hidden_effect = {
			# 			scope:current_county = {
			# 				change_title_holder = {
			# 					holder = scope:local_warlord
			# 					change = scope:change
			# 					take_baronies = yes
			# 				}
			# 			}
			# 		}
			# 		resolve_title_and_vassal_change = scope:change
			# 		# And give them their independence.
			# 		create_title_and_vassal_change = {
			# 			type = independency
			# 			save_scope_as = change
			# 			add_claim_on_loss = no
			# 		}
			# 		hidden_effect = {
			# 			scope:local_warlord = {
			# 				becomes_independent = { change = scope:change }
			# 				save_scope_as = truce_loc
			# 				add_truce_both_ways = {
			# 					character = scope:attacker
			# 					days = 3650
			# 					name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
			# 				}
			# 			}
			# 		}
			# 		resolve_title_and_vassal_change = scope:change
			# 		# 同じ宗教、文化だったら部族に
			# 		hidden_effect = {
			# 			if = {
			# 				limit = {
			# 					scope:local_warlord.faith = scope:attacker.faith
			# 					scope:local_warlord.culture = scope:attacker.culture
			# 				}
			# 				scope:local_warlord = {
			# 					change_government = tribal_government
			# 				}
			# 			}
			# 		}
			# 	}
			# }
			# ## 土地を受け取ったひとを独立させる
			# ## Give all old vassals outside of the target_titles independence.
			# custom_tooltip = fp1_varangian_adventurer_conquest.summaries.old_vassals
			# every_vassal = {
			# 	limit = {
			# 		NOT = {
			# 			any_held_title = {
			# 				duchy = {
			# 					any_in_de_jure_hierarchy = {
			# 						this = scope:target
			# 					}
			# 				}
			# 			}
			# 		}
			# 		NOT = { is_close_or_extended_family_of = scope:attacker }
			# 		NOT = { is_primary_heir_of = scope:attacker }
			# 	}
			# 	create_title_and_vassal_change = {
			# 		type = independency
			# 		save_scope_as = change
			# 		add_claim_on_loss = no
			# 	}
			# 	hidden_effect = {
			# 		becomes_independent = { change = scope:change }
			# 		save_scope_as = truce_loc
			# 		add_truce_both_ways = {
			# 			character = scope:attacker
			# 			days = 3650
			# 			name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
			# 		}
			# 	}
			# 	resolve_title_and_vassal_change = scope:change
			# }
			# <-手放す土地について

			# 家族の移動->
			## Move any remaining newly-landless family to scope:attacker's court.
			every_in_list = {
				list = vassal_family_not_processed_list
				limit = { is_ruler = no }
				save_temporary_scope_as = landless_family
				scope:attacker = { add_courtier = scope:landless_family }
			}
			# <-家族の移動

			# 定住先の宗教を考慮するため変わってたら一旦戻す
			# 部族でなくなってしまった場合、部族に戻す
			hidden_effect = {
				if = {
					limit = {
						NOT = { has_government = tribal_government }
					}
					change_government = tribal_government
				}
			}

			# 文化融合について
			hidden_effect = {
				scope:attacker = {
					trigger_event = {
						id = culture_emergence_events.0001
						years = { 1 3 }
					}
				}
				# 未改革宗教を信仰していた場合のみ宗教変更
				random_list = {
					90 = {
						if = {
							limit = {
								scope:attacker.faith = { has_doctrine_parameter = unreformed }
							}
							if = {
								limit = {
									scope:defender.faith = { NOT = { has_doctrine_parameter = unreformed } }
								}
								scope:attacker = {
									set_character_faith_with_conversion = scope:defender.faith
								}
							}
							else_if = {
								limit = {
									exists = scope:new_capital
									scope:new_capital.faith = { NOT = { has_doctrine_parameter = unreformed } }
								}
								scope:attacker = {
									set_character_faith_with_conversion = scope:new_capital.faith
								}
							}
							else = {
								random_list = {
									50 = {
										scope:attacker = {
											set_character_faith_with_conversion = faith:maturidi
										}
									}
									50 = {
										scope:attacker = {
											set_character_faith_with_conversion = faith:orthodox
										}
									}
								}
							}
						}
					}
					10 = {
						random_list = {
							50 = {
								scope:attacker = {
									set_character_faith_with_conversion = faith:maturidi
								}
							}
							50 = {
								scope:attacker = {
									set_character_faith_with_conversion = faith:alevi
								}
							}
						}
					}
				}
			}

			hidden_effect = {
				# 政体変更
				if = {
					limit = {
						scope:attacker.faith.religion = religion:islam_religion
					}
					change_government = clan_government
				}
				else_if = {
					limit = {
						scope:attacker.faith = { NOT = { has_doctrine_parameter = unreformed } }
					}
					change_government = feudal_government
				}
			}

			hidden_effect = {
				# 反乱対処用のイベント兵
				scope:attacker = {
					if = {
						limit = {
							exists = capital_province
						}
						spawn_army = {
							men_at_arms = {
								type = horse_archers
								stacks = DIRECT_BARBARIAN_SETTLEMENT_CB_FOR_AI_NUM_OF_horse_archers_ON_VICTORY
							}
							men_at_arms = {
								type = light_horsemen
								stacks = DIRECT_BARBARIAN_SETTLEMENT_CB_FOR_AI_NUM_OF_light_horsemen_ON_VICTORY
							}
							location = capital_province
							uses_supply = no
							inheritable = no
							name = turkic_tribal_event_troops
						}
					}
				}
			}
		}

		#If the Mogyers aren't independent, make them so.
		if = {
			limit = {
				scope:attacker = { is_independent_ruler = no }
			}
			create_title_and_vassal_change = {
				type = independency
				save_scope_as = change
				add_claim_on_loss = no
			}
			change_liege_or_become_independent = {
				CHANGE = scope:change
				VASSAL = scope:attacker
			}
			resolve_title_and_vassal_change = scope:change
		}

		# 名声取得
		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# 同盟者と名声を分け合う?
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# 外交範囲外になった同盟者との同名を切る
		# Break alliances now out of diplo range
		if = {
			limit = {
				scope:attacker = {
					any_ally = {
						NOT = { in_diplomatic_range = scope:attacker }
					}
				}
			}
			scope:attacker = {
				every_ally = {
					limit = {
						NOT = { in_diplomatic_range = scope:attacker }
					}
					break_alliance = scope:attacker
				}
			}
		}

		# 停戦
		# Truce
		add_truce_attacker_victory_effect = yes
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }

		# Prestige for the attacker's war allies

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # Not important as the scales are identical
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_white_peace_effect = yes

		scope:attacker = {
			add_prestige = mongol_invasion_cb_prestige_white_peace
		}
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}
	on_defeat = {
	}

	# 戦争に関する設定
	transfer_behavior = transfer
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	transfer_behavior = transfer
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "DIRECT_BARBARIAN_SETTLEMENT_WAR_NAME"
	war_name_base = "DIRECT_BARBARIAN_SETTLEMENT_WAR_NAME_BASE"
	cb_name = "DIRECT_BARBARIAN_SETTLEMENT_NAME"
	
	interface_priority = 100
	
	use_de_jure_wargoal_only = yes
	
	attacker_wargoal_percentage = 0.5
}

undirect_barbarian_settlement = {
	icon = invasion
	group = invasion	#Switching this to event will render the CB invisible.

	allowed_for_character = {
		# ai = yes
		always = no
	}

	allowed_against_character = {
		# always = yes
	}
	
	# cbの設定
	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	target_titles = all
	target_title_tier = all
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder

	# war score
	max_attacker_score_from_battles = 200
	max_defender_score_from_battles = 200
	max_defender_score_from_occupation = 25
	max_attacker_score_from_occupation = 150
	full_occupation_by_defender_gives_victory = yes
	check_all_defenders_for_ticking_war_score = yes
	attacker_capital_gives_war_score = no
	defender_capital_gives_war_score = no

	landless_attacker_needs_armies = no
	white_peace_possible = no
	allow_hostages = no

	valid_to_start = {
		# exists = scope:defender
	}

	should_invalidate = {
	}

	on_invalidated = {
	}
	on_invalidated_desc = msg_invasion_war_invalidated_message

	cost = {
	}

	on_declaration = {
		# イベント兵のスポーン
		scope:attacker = {
			if = {
				limit = {
					exists = capital_province
				}
				spawn_army = {
					men_at_arms = {
						type = light_horsemen
						stacks = 2
					}
					location = capital_province
					uses_supply = no
					inheritable = no
					name = turkic_tribal_event_troops
				}
			}
		}
		on_declared_war = yes
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = { is_local_player = yes }
				}
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
	}
	on_victory = {
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		# 領土の接収->
		every_in_list = {
			list = target_titles
			custom_tooltip = CONQUEST_CB_TITLE
			every_in_de_jure_hierarchy = {
				limit = {
					tier = tier_county
					# Current holder must be a (sub)vassal of the defender (no poaching titles from 3rd parties!)
					#exists = holder
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}
				change_title_holder = {
					holder = scope:attacker
					change = scope:change
					take_baronies = yes
				}
			}
			scope:attacker = {
				if = {
					limit = { is_independent_ruler = no }
					becomes_independent = {
						change = scope:change
					}
				}
			}
		}
		resolve_title_and_vassal_change = scope:change
		# <-領土の接収

		# 誰かの封臣になってしまったら独立させる
		hidden_effect = {
			#If the Mogyers aren't independent, make them so.
			if = {
				limit = {
					scope:attacker = { is_independent_ruler = no }
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change_ind
					add_claim_on_loss = no
				}
				change_liege_or_become_independent = {
					CHANGE = scope:change_ind
					VASSAL = scope:attacker
				}
				resolve_title_and_vassal_change = scope:change_ind
			}
		}
		
		# 名声取得
		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# 停戦
		# Truce
		add_truce_attacker_victory_effect = yes
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }

		# Prestige for the attacker's war allies

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # Not important as the scales are identical
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_white_peace_effect = yes

		scope:attacker = {
			add_prestige = mongol_invasion_cb_prestige_white_peace
		}
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}
	on_defeat = {
	}

	# 戦争に関する設定
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	transfer_behavior = transfer
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "DIRECT_BARBARIAN_SETTLEMENT_WAR_NAME"
	war_name_base = "DIRECT_BARBARIAN_SETTLEMENT_WAR_NAME_BASE"
	cb_name = "DIRECT_BARBARIAN_SETTLEMENT_NAME"
	
	interface_priority = 100
	
	use_de_jure_wargoal_only = yes
	
	attacker_wargoal_percentage = 0.5
}


# landless_raiders_invasion = {
# 	icon = invasion
# 	group = invasion

# 	combine_into_one = yes
# 	should_show_war_goal_subview = yes
# 	mutually_exclusive_titles = { always = yes }

# 	target_titles = all
# 	target_title_tier = county
# 	target_de_jure_regions_above = yes
# 	ignore_effect = change_title_holder

# 	ai_can_target_all_titles = { always = yes }
# 	# ai_score_mult = { value = varangian_adventure_ai_targeting_value }

# 	# war score
# 	# 移住なので、マジャールと同じく自分の領土が占領された際のスコアを少なく
# 	max_attacker_score_from_battles = 200
# 	max_defender_score_from_battles = 200
# 	max_defender_score_from_occupation = 50
# 	max_attacker_score_from_occupation = 150
# 	full_occupation_by_defender_gives_victory = no
# 	landless_attacker_needs_armies = yes
# 	attacker_capital_gives_war_score = no

# 	white_peace_possible = no
	
	
# 	# CBが表示される条件
# 	allowed_for_character = {
# 		always = no
# 	}

# 	# CBを使用する条件
# 	allowed_for_character_display_regardless = {
# 	}

# 	# 攻撃可能対象
# 	allowed_against_character = {
# 	}

# 	allowed_against_character_display_regardless = {
# 	}

# 	valid_to_start = {
# 	}

# 	# こんなときCBが無効になるよ
# 	should_invalidate = {
# 		OR = {
# 			# 守る側が攻撃対象を持たなくなってしまったとき?
# 			NOT = {
# 				any_in_list = {
# 					list = target_titles
# 					any_in_de_jure_hierarchy = {
# 						tier = tier_county
# 						exists = holder
# 						holder = {
# 							target_is_same_character_or_above = scope:defender
# 						}
# 					}
# 				}
# 			}
# 		}
# 	}

# 	# 無効化されたと
# 	on_invalidated_desc = msg_county_conquest_war_invalidated_message
	
# 	on_invalidated = {}

# 	# コスト
# 	cost = {
# 		prestige = {
# 			value = 0
# 			# multiply = common_cb_prestige_cost_multiplier
# 		}
# 	}

# 	# 宣戦布告時
# 	on_declaration = {
# 		on_declared_war = yes
# 	}

# 	# 勝利時
# 	on_victory_desc = {
# 		first_valid = {
# 			triggered_desc = {
# 				trigger = {
# 					scope:attacker = { is_local_player = yes }
# 				}
# 				desc = county_conquest_cb_victory_desc_attacker
# 			}
# 			desc = county_conquest_cb_victory_desc
# 		}
# 	}

# 	on_victory = {
# 		scope:attacker = { show_pow_release_message_effect = yes }
		
# 		# 領土の接収
# 		create_title_and_vassal_change = {
# 			type = conquest
# 			save_scope_as = change
# 			add_claim_on_loss = yes
# 		}

# 		every_in_list = {
# 			list = target_titles
# 			limit = {
# 				exists = holder
# 				holder = {
# 					OR = {
# 						this = scope:defender
# 						target_is_liege_or_above = scope:defender
# 					}
# 				}
# 			}
# 			change_title_holder = {
# 				holder = scope:attacker
# 				change = scope:change
# 				take_baronies = yes
# 			}
# 			if = {
# 				limit = { scope:attacker = { is_independent_ruler = no } }
# 				becomes_independent = {
# 					change = scope:change
# 				}
# 			}
# 		}
# 		resolve_title_and_vassal_change = scope:change

# 		# 略奪者について
# 		hidden_effect = {
# 			scope:attacker = {
# 				every_sub_realm_county = {
# 					change_county_control = 100
# 				}
# 				every_sub_realm_barony = {
# 					title_province = {
# 						refill_garrison = yes
# 						refill_levy = yes
# 					}
# 				}
# 				if = {
# 					limit = {
# 						NOT = { has_government = tribal_government }
# 					}
# 					change_government = tribal_government
# 				}
# 			}
# 		}

# 		# raze
# 		custom_tooltip = {
# 			text = MIGRATION_CB_RAZE_COUNTY
# 			scope:attacker = {
# 				if = {
# 					limit = {
# 						has_game_rule = barbarian_migration_strength_normal
# 					}
# 					every_realm_county = {
# 						random_list = {
# 							25 = {
# 								change_development_progress_with_overflow = -200
# 								scope:attacker = {
# 									add_gold = 50
# 									add_prestige_experience = 50
# 								}
# 							}
# 							55 = {
# 								change_development_progress_with_overflow = -300
# 								scope:attacker = {
# 									add_gold = 60
# 									add_prestige_experience = 60
# 								}
			
# 							}
# 							15 = {
# 								change_development_progress_with_overflow = -400
# 								scope:attacker = {
# 									add_gold = 70
# 									add_prestige_experience = 70
# 								}
# 							}
# 							5 = {
# 								change_development_progress_with_overflow = -500
# 								scope:attacker = {
# 									add_gold = 80
# 									add_prestige_experience = 80
# 								}
# 							}
# 						}
# 					}
# 				}
# 				else_if = {
# 					limit = {
# 						has_game_rule = barbarian_migration_strength_hard
# 					}
# 					every_realm_county = {
# 						random_list = {
# 							15 = {
# 								change_development_progress_with_overflow = -200
# 								scope:attacker = {
# 									add_gold = 50
# 									add_prestige_experience = 50
# 								}
# 							}
# 							5 = {
# 								change_development_progress_with_overflow = -300
# 								scope:attacker = {
# 									add_gold = 60
# 									add_prestige_experience = 60
# 								}
			
# 							}
# 							5 = {
# 								change_development_progress_with_overflow = -400
# 								scope:attacker = {
# 									add_gold = 70
# 									add_prestige_experience = 70
# 								}
# 							}
# 							75 = {
# 								change_development_progress_with_overflow = -500
# 								scope:attacker = {
# 									add_gold = 80
# 									add_prestige_experience = 80
# 								}
# 							}
# 						}
# 					}
# 				}
# 				every_sub_realm_barony = {
# 					title_province = {
# 						if = {
# 							limit = { NOT = { has_province_modifier = recently_looted_modifier } }
# 							add_province_modifier = {
# 								modifier = recently_looted_modifier
# 								years = 5
# 							}
# 						}
# 					}
# 				}
# 			}
# 		}

# 		# destroy temp title
# 		hidden_effect = {
# 			scope:attacker.primary_title = {
# 				if = {
# 					limit = {
# 						has_variable = temporary_title
# 					}
# 					save_scope_as = destroyable_title
# 					scope:attacker = { destroy_title = scope:destroyable_title }
# 				}
# 			}
# 		}

# 		# Prestige Progress for the Attacker
# 		every_in_list = {
# 			list = target_titles
# 			scope:attacker = {
# 				add_prestige_experience = minor_prestige_value
# 			}
# 		}

# 		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
# 		modify_allies_of_participants_fame_values = {
# 			WINNER = scope:attacker
# 			FAME_BASE = minor_prestige_value
# 			IS_RELIGIOUS_WAR = no
# 			WINNER_ALLY_FAME_SCALE = 0
# 			LOSER_ALLY_FAME_SCALE = 1
# 		}

# 		# Truce
# 		add_truce_attacker_victory_effect = yes
# 		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
# 	}

# 	on_white_peace_desc = {
# 		desc = WHITE_PEACE_DISABLED
# 	}

# 	# 攻撃者が負けたとき
# 	on_defeat_desc = {
# 		first_valid = {
# 			triggered_desc = {
# 				trigger = { scope:defender = { is_local_player = yes } }
# 				desc = county_conquest_cb_defeat_desc_defender
# 			}
# 			triggered_desc = {
# 				trigger = {
# 					scope:attacker = {
# 						is_local_player = yes
# 						has_targeting_faction = yes
# 					}
# 				}
# 				desc = county_conquest_cb_defeat_desc_attacker
# 			}
# 			desc = county_conquest_cb_defeat_desc
# 		}
# 	}

# 	on_defeat = {
# 		#EP2 accolade glory gain for winning against higher ranked enemy
# 		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }

# 		# Prestige loss for the attacker
# 		scope:attacker = {
# 			pay_short_term_gold_reparations_effect = {
# 				GOLD_VALUE = 3
# 			}
# 			add_prestige = {
# 				value = major_prestige_value
# 				multiply = -1.0
# 			}
# 		}

# 		# Prestige for Defender
# 		scope:defender = {
# 			add_prestige_war_defender_effect = {
# 				PRESTIGE_VALUE = major_prestige_value
# 			}
# 		}

# 		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
# 		modify_allies_of_participants_fame_values = {
# 			WINNER = scope:defender
# 			FAME_BASE = medium_prestige_value
# 			IS_RELIGIOUS_WAR = no
# 			WINNER_ALLY_FAME_SCALE = 1
# 			LOSER_ALLY_FAME_SCALE = 1
# 		}

# 		add_truce_attacker_defeat_effect = yes

# 		scope:attacker = {
# 			save_temporary_scope_as = loser
# 		}

# 		on_lost_aggression_war_discontent_loss = yes
# 	}

# 	transfer_behavior = transfer

# 	on_primary_attacker_death = inherit
# 	on_primary_defender_death = inherit

# 	attacker_allies_inherit = yes
# 	defender_allies_inherit = yes

# 	war_name = "BARBARIAN_MIGRATION_CB_INVASION_WAR_NAME"
# 	war_name_base = "BARBARIAN_MIGRATION_CB_INVASION_WAR_NAME_BASE"
# 	cb_name = "BARBARIAN_MIGRATION_AI_CB_NAME"

# 	interface_priority = 79

# 	use_de_jure_wargoal_only = yes

# 	attacker_wargoal_percentage = 0.8
# }